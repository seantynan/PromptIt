# **PromptLab Functional Specification**

**Project Name:** PromptLab (or PromptIt) (working display name)
**Version:** 1.0 (initial prototype)
**Purpose:** Provide a modular, extensible AI-driven text transformation platform where users can apply self-contained “Promptlets” to input text and receive structured output and feedback.

---

## **1. Overview**

PromptLab is a web-based, standalone HTML/JS application that allows users to:

* Paste or edit text in a controlled input panel.
* Select a “Promptlet” (modular AI task) to transform the text.
* View transformed output in a dedicated panel.
* Receive structured feedback in a separate panel.
* Copy the transformed text without copying feedback.

The system is designed for modularity: new Promptlets can be added easily without changing core application logic. The UI and internal architecture are designed for future expansion while maintaining simplicity and usability.

---

## **2. Core Concepts**

### **2.1 Promptlet**

* **Definition:** A self-contained AI task with its own system prompt, output format, and feedback rules.
* **Characteristics:**

  * Name: Displayed to the user in the UI.
  * Description: Explains the Promptlet’s purpose.
  * System Prompt: Template applied to user input for the AI API.
  * Output Section: Designated section of AI response to display in the output panel.
  * Feedback Section: Designated section of AI response to display in the feedback panel.

**Example Promptlets:**

* **Prettifier:** Corrects grammar, spelling, formatting, capitalization; generates a change log.
* **FrenchLearner:** Translates English text to French and provides learning notes; feedback tailored to user level (Beginner/Intermediate/Advanced).
* **Stub Promptlet:** Placeholder for future tools; displays “Not implemented yet” in feedback.

---

### **2.2 Panels**

* **Left Box (Input Text Panel)**

  * Editable textarea.
  * Max length: 100,000 characters.
  * Scrollable for long inputs.
  * Placeholder: “Paste your text here…”
* **Right Box (Output Panel)**

  * Displays Promptlet-transformed text.
  * Scrollable.
  * Copy button copies **only** the output text.
* **Feedback Panel**

  * Displays structured feedback from the Promptlet.
  * Scrollable; dynamically adjusts to content.
  * Not included when copying output.
* **Promptlet Selector**

  * Buttons or pill-style toggles, each corresponding to a Promptlet.
  * Stub buttons show a “Not implemented yet” message in feedback.

---

## **3. Functional Requirements**

### **3.1 Input Handling**

1. Users paste or type text in the Left Box.
2. Maximum of 100,000 characters enforced; input beyond this is not allowed.
3. Editing input text after running a Promptlet is allowed.

---

### **3.2 Promptlet Execution**

1. User selects a Promptlet via a button.
2. System constructs the full prompt by combining the Promptlet system prompt and the user input.
3. Application sends the prompt to OpenAI’s API using a stored API key.
4. Response is parsed:

   * **Output Section** → displayed in Right Box.
   * **Feedback Section** → displayed in Feedback Panel.
5. If API call fails, the Feedback Panel displays a clear error message.
6. Stub Promptlets show “Not implemented yet” without making an API call.

---

### **3.3 Output**

* Right Box displays AI-transformed text only.
* Copy button copies content to clipboard.
* Text formatting preserved (monospace or default font for readability).
* Feedback Box shows structured information (change log, notes, errors) but is **never copied**.

---

### **3.4 Promptlet Management**

* `prompts.js` stores all Promptlets. Each Promptlet includes:

```js
{
  name: "Prettifier",
  description: "Corrects and formats text professionally",
  prompt: `...system prompt...`,
  outputSection: "CLEAN VERSION",
  feedbackSection: "CHANGE LOG"
}
```

* Adding a new Promptlet requires:

  1. Adding entry in `prompts.js`.
  2. Adding a button in `index.html`.
  3. (Optional) Updating `app.js` if special behavior is required.

---

### **3.5 Validation**

* Left Box input cannot exceed 100,000 characters.
* API will validate prompt+input token limits; no additional UI splitting or chunking.

---

### **3.6 User Feedback**

* Feedback Panel displays:

  * Change log (for Prettifier).
  * Learning notes (for FrenchLearner).
  * Errors or warnings from API.
* Scrollable for large outputs.
* Optional: future collapsible sections for long feedback.

---

### **3.7 UX Considerations**

* Scrollable panels with dynamic height.
* Processing indicator visible while API call is in progress.
* Promptlet buttons indicate active selection.
* Stub buttons provide clear feedback when functionality is not implemented.
* Copy button provides visual confirmation (toast or highlight).
* UI uses a clear, readable font and layout, adaptable to various screen sizes.

---

### **3.8 Extensibility**

* Adding new Promptlets requires minimal effort.
* Architecture allows future features:

  * Multiple user levels (e.g., FrenchLearner levels).
  * Metadata per Promptlet (e.g., token limits, max input length).
  * Optional additional panels (e.g., source tracking, word count).

---

### **3.9 Security**

* API key stored in `config.js` for local use.
* No hardcoding of API keys if the project is distributed.
* For production or hosted versions, consider a backend proxy to protect the key.

---

## **4. File Structure**

```
PromptLab/
│
├─ index.html          # Main UI layout
├─ styles.css          # CSS for layout, fonts, buttons, panels
├─ app.js              # Main JS logic (input handling, API calls, output/feedback)
├─ prompts.js          # Promptlet definitions
├─ config.js           # Stores OpenAI API key and settings
└─ utils.js (optional) # Helper functions for copy, toasts, formatting
```

---

## **5. Future Enhancements**

* Dynamic user level selection for learning Promptlets.
* Collapsible feedback sections for long outputs.
* Approximate token counter displayed for very long inputs.
* Ability to edit Promptlet prompts within the UI for advanced users.
* Additional Promptlets: Summarizer, ToneRefiner, FactChecker, Simplifier, IdeaExpander.

---

## **6. UI/UX Mockup (Textual Representation)**

```
---------------------------------------------------------------
| PromptLab – AI Text Tools                                    |
---------------------------------------------------------------
| Left Box (Input Text)       | Right Box (Output Text)       |
| [Paste/Edit text here]      | [Promptlet output]           |
|                             |                              |
|                             | Copy Output Button           |
---------------------------------------------------------------
| Promptlet Buttons: [Prettifier] [FrenchLearner] [Stub] ...  |
---------------------------------------------------------------
| Feedback Panel:                                             |
| [Change log / Notes / Errors / Warnings]                  |
---------------------------------------------------------------
```

---

## **7. User Interaction Flow**

1. User pastes text in Left Box.
2. User clicks a Promptlet button.
3. App shows “Processing…” indicator.
4. API call executes.
5. On success:

   * Right Box updated with transformed text.
   * Feedback Panel updated with change log or notes.
6. User edits input and clicks Promptlet again → panels update.
7. Copy button copies Right Box content.

---

## **8. Technical Notes**

* JavaScript uses `fetch()` to call OpenAI API.
* Standalone HTML/JS project; can run locally via `http-server` or VS Code Live Server.
* Multi-line system prompts use template literals to preserve formatting.
* Script load order: `prompts.js` must load before `app.js`.
* Placeholder buttons for future Promptlets display a friendly message in Feedback Panel.

---

## **9. Constraints**

* Input text max 100,000 characters.
* Output and feedback panels must handle large text (scrollable).
* API key required in `config.js`.

---

### ✅ Summary

PromptLab is a **modular, extensible AI text transformation application**, with a clean separation of input, output, and feedback. The **Promptlet abstraction** allows future expansion to many AI-driven tasks while maintaining simplicity and clarity for the user.

All agreed features — Prettifier, FrenchLearner example, feedback handling, stub buttons, scrollable panels, extensibility — are incorporated.

---

